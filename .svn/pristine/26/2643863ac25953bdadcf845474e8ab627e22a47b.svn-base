<?php //if ( ! defined('BASEPATH')) exit('No direct script access allowed');

class Florence extends CI_Controller 
{
	public function __construct() 
	{
		parent::__construct();
		$this->load->model('common_model');
		$this->load->library('common_function');	
		$this->load->model('organization_model');
		$this->load->model('orgsignup_model');
		$this->load->model('user_model');
		$this->load->library('form_validation');
		$this->load->helper('url');
		$this->load->helper('cookie');
		$this->load->library('pagination'); 
		error_reporting(0);
	}
	
	public function index()
	{
		$URL = $_SERVER['HTTP_REFERER'];
		$tempUrl = explode("/", $URL);		
		$referredby = $tempUrl[4];
		if($referredby == "arpasearch"){
			$this->session->set_userdata('referred_by',$referredby);
		}
		
		//echo "<pre>";print_r($this->session->userdata);
		if($this->session->userdata('orgstep') && $this->session->userdata('userid'))
		{ 
			if($this->session->userdata('orgstep')==1)
				redirect($this->config->item('base_url') . "confirm-type"); 
			if($this->session->userdata('orgstep')==2)
				redirect($this->config->item('base_url') . "org-add"); 
			if($this->session->userdata('orgstep')==3)
				redirect($this->config->item('base_url') . "org-ref"); 
			if($this->session->userdata('orgstep')==4)
				redirect($this->config->item('base_url') . "add-org-info"); 
		}
		
		if($this->session->userdata('userid'))
		{
			redirect($this->config->item('base_url') . "dashboard/");
		}	
		
		//$this->session->set_userdata('checkout',$return);
        $data = array();
        $data['Err_Msg_forgot'] = '';
        $data['Err_Msg_reg'] = '';
        $data['Err_Msg_login'] = '';
        $data['Err_Msg'] = '';
        $data['rem_password'] = get_cookie('pass');
        $data['rem_email'] = get_cookie('user');
        $data['menu_no'] = 'yes';
	
		$this->session->unset_userdata('fb_user');
		 
		$form_field = array('username' => "",
							'lastname' => "",
							'emailaddress' => "",
							'password_field' => "",
							'rpassword' => "",
							'referred_by' => "",
							'tnc' => "",
							'signup' => "",
							'remember' => "",
							'action' => "",
							'oldertc' => "",
							'organizationname' => "",
							'orgcode' => "",
							'organizationzip' => "",
							'maskphone' => "",
							
						);
        foreach ($form_field as $key => $value) {
            $data['register'][$key] = $value;
        }
        if ($this->input->post('action')) 
		{
            foreach ($form_field as $key => $value) 
			{
				if(!is_array($this->input->post($key)))
				{
                	$data['register'][$key] = $this->common_function->custom_htmlentities($this->input->post($key));
				}else{
					$data['register'][$key] = $this->input->post($key);
					}
            }
			$verificationCode = $this->generate_random_password(15);
			$data['register']['email_verification_code'] = $verificationCode;
			
            if ($this->input->post('action') == "registeruser") 
			{
                $this->form_validation->set_rules('username', 'First Name', 'trim|required');
                $this->form_validation->set_rules('lastname', 'Last Name', 'trim|required');
                $this->form_validation->set_rules('emailaddress', 'Email Address', 'trim|required|valid_email');
                //$this->form_validation->set_rules('password_field', 'Password', 'trim|required|spacecheck|min_length[6]');
				$this->form_validation->set_rules('password_field', 'Password', 'trim|required|min_length[6]');
				$this->form_validation->set_rules('organizationzip', 'Zip/Postal Code', 'trim|required');
				$this->form_validation->set_rules('organizationname', 'Organization Name', 'trim|required');			
                //$this->form_validation->set_rules('maskphone', 'Phone Number', 'trim|required');	
				$counts = $this->common_model->check_exists("tbl_users", "in_user_id", array("st_email" => $data['register']['emailaddress'], "in_deleted" => '0'));
                $Err_Msg = '';
                if ($counts > 0) {
                    $Err_Msg = "Email address already exists.";
					$fb_user_id = $this->common_model->check_fb_user($data['register']['emailaddress']);
					if(isset($fb_user_id) && !empty($fb_user_id) && $fb_user_id['st_facebook_uid'] != '')
					{
						$this->session->set_userdata('fb_user', 'It looks like you created your account by using the Facebook Login / App. Please click on the Sign In to With Facebook to be logged into the system.');	
						$Err_Msg = 'It looks like you created your account by using the Facebook.';				
					}
                }
                if ($this->form_validation->run() == FALSE || $Err_Msg != '' || ($this->session->userdata('fb_user') && $this->session->userdata('fb_user') != '')) {
                    $data['Err_Msg_reg'] = validation_errors() . $Err_Msg;
                    //$this->load->view('user_register',$data);	
                } else 
				{
				
                    $browser_details = array();
                    $browser_details["page_referral"] = $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'];
                    $browser_details["ip_address "] = $_SERVER['REMOTE_ADDR'];
                    $browser_details["browser_used"] = $_SERVER['HTTP_USER_AGENT'];
                    
                    $referred_by = $this->session->userdata('referred_by');
					if($referred_by == "arpasearch"){
						$st_referred_by = $referred_by;
					}else{
						$st_referred_by = $data['register']['referred_by'];
					}


                    $data_array = array("st_display_name" => $data['register']['username'],
										   "st_last_name" => $data['register']['lastname'],
											   "st_email" => $data['register']['emailaddress'],
											"st_password" => md5($data['register']['password_field']),
                                         "st_referred_by" => $st_referred_by,
                                             "dt_created" => date("Y-m-d h:i:s"),
                                            "dt_modified" => date("Y-m-d h:i:s"),
                                          "in_newsletter" => (($data['register']['signup'] != '') ? "Y" : "N"),
                                              "in_public" => "1",
                                              "in_status" => "1",
                                      "in_age_terms_flag" => "1",
                                        "st_browser_info" => @serialize($browser_details),
						     "st_email_verification_code" => $verificationCode,
										 'flg_immediate_all' => 1,
								   'flg_immediate_transport' => 1,
									  'flg_immediate_animal' => 1,
										'flg_immediate_fund' => 1,	
									);
					$org_name = $data['register']['organizationname'];
					$orgcode = $data['register']['orgcode'];
					$org_zip  = trim($data['register']['organizationzip']);
                    $inserted_id = $this->user_model->insert_user($data_array);
                    $this->user_model->insert_user_profile(array("in_user_id" => $inserted_id,"st_zip" => $org_zip, "in_status" => "1", "dt_created" => date("Y-m-d H:i:s"),"hurricane_harvey_reg" => 3));
					
					$address_details	=	$this->common_model->getaddress($org_zip);

					$user_profile_info["st_city"]  = isset($address_details['city']) ? $address_details['city'] : '';
					$user_profile_info["st_state"] = isset($address_details['state_prefix']) ? $address_details['state_prefix'] : '';
					$user_profile_info["st_country"] = isset($address_details['st_country']) ? strtoupper($this->common_function->shortCountry[trim($address_details['st_country'])]) : '';
					$this->user_model->update_user_info($user_profile_info, $inserted_id, 'tbl_user_profile');
					
					$org_data = array('st_org_name'=>$org_name,
									  'st_org_type'=>'R',
									 "in_user_id"=>$inserted_id,
									 'in_created_by'=>$inserted_id,
									 'in_modified_by'=>$inserted_id,
									 "st_director"=>$data['register']['username']." ".$data['register']['lastname'],
									 "st_email_address"=>$data['register']['emailaddress'],
									 'in_status'=>4,
									 "in_direct_signup"=> 1,
									 "st_org_complete"=>"1",
									 "st_zip"=>$org_zip,
									 'st_org_code' => $orgcode,
									 "st_referred_by" => $st_referred_by,
									 );
					
					$this->db->insert('tbl_organization',$org_data);
					
					
					$orgid=$this->db->insert_id();
					
					$this->session->set_userdata('userid',$inserted_id);
					$this->session->set_userdata('user_name',$data['register']['username']);
                    $this->session->set_userdata('last_name',$data['register']['lastname']);
                    $this->session->set_userdata('email',$data['register']['emailaddress']);
					$this->session->set_userdata('zip',$org_zip);
					$this->session->set_userdata('orgId',$orgid);
					$this->session->set_userdata('orgstep',1);
					$this->session->set_userdata('popup_display',1);
					setcookie("userid",$inserted_id,0,"/",".doobert.com");

					
                    $this->login_details($data['register']);
					$this->email_confirm();	
					
                    $lat = 0;
					$lon = 0;
					if($this->session->userdata('recommend_routing_id'))
					{
						if(count($this->session->userdata('recommend_routing_id'))>0)
						{
							foreach($this->session->userdata('recommend_routing_id') as $key=>$value)
							{
								if(!empty($value))
								{
									$routing_leg = $this->common_model->get_public_assisted_routing($value);
									if(isset($routing_leg)&& count($routing_leg)>0)
									{	
										$legs_cover = array('in_transportation_id'=> $routing_leg['in_transportation_id'],
																 'in_route_type'  => $routing_leg['in_route_type'],
																	'in_user_id'  => $this->session->userdata('userid'),
																'st_from_street' => $routing_leg['st_from_street'],
																  'st_from_city' => $routing_leg['st_from_city'],
																'st_from_state'	 => $routing_leg['st_from_state'],	
																  'st_from_zip'	 => $routing_leg['st_from_zip'],
															  'st_from_country'	 => $routing_leg['st_from_country'],
																'st_to_street' 	 => $routing_leg['st_to_street'],
																  'st_to_city'	=> $routing_leg['st_to_city'],
																 'st_to_state'  => $routing_leg['st_to_state'],	
																	'st_to_zip'	=> $routing_leg['st_to_zip'],
																'st_to_country' => $routing_leg['st_to_country'],
																	'dt_created' => date("Y-m-d H:i:s"),
																	'dt_modified' => date("Y-m-d H:i:s"),
																		'st_info' => $routing_leg['st_notes']
															);
										$this->db->insert('tbl_legs_cover', $legs_cover);
										$delete_legs = array('in_deleted'=>1);
										$this->db->where('in_id',$value);
										$this->db->update('tbl_recommend_routing_leg',$delete_legs);
									}
										
								}	
							}
						}
						$this->session->unset_userdata('recommend_routing_id');	
							
					}
					
					if($this->session->userdata('recommend_trip_id'))
						{
							if(count($this->session->userdata('recommend_trip_id'))>0)
							{
								foreach($this->session->userdata('recommend_trip_id') as $key=>$value)
								{
									if(!empty($value))
									{
										$airline_date = $this->common_model->get_public_airline_routing($value);
										if(isset($airline_date)&& count($airline_date)>0)
										{	
											$trip_date = array('in_transportation_id' => $airline_date['in_transportation_id'],
																'in_user_id'   => $this->session->userdata('userid'),
																'in_deleted'   => 0,	
																'dt_created'   => date("Y-m-d H:i:s"),
																'dt_modified'  => date("Y-m-d H:i:s"),
																'dt_trip_date' => date('Y-m-d',strtotime($airline_date['trip_date'])),
																'st_info'	   => $airline_date['st_notes'],	
															  );									
											$this->db->insert('tbl_airline_transport_leg', $trip_date);
											
											$delete_legs = array('in_deleted'=>1);
											$this->db->where('in_id',$value);
											$this->db->update('tbl_recommend_tripdate',$delete_legs);
										}
										
									}	
								}
							}	
							$this->session->unset_userdata('recommend_trip_id');
						}	
						
						if($this->session->userdata('recommend_user_name'))
						{
							$this->session->unset_userdata('recommend_user_name');
						}

						if($this->session->userdata('recommend_user_email'))
						{
							$this->session->unset_userdata('recommend_user_email');
						}		
					
						
                    $user_result = $this->user_model->match_nondoobert_email_id($this->session->userdata('email'));
                    if (isset($user_result) && !empty($user_result)) 
					{
                        $lat = 0;
                        $lon = 0;
						$this->load->model('orgtrasnportation_model');
                        if ($this->session->userdata('zip')) 
						{
                            //$get_lat_long = $this->common_model->get_lattitude_longitude(trim($user_result[0]['st_zipcode']));
							$get_lat_long = $this->common_model->get_lattitude_longitude($this->session->userdata('zip'));

                            if (!empty($get_lat_long['lat']) && !empty($get_lat_long['lon'])) 
							{
                                $user_vehicle_info['zip_lat'] = $get_lat_long['lat'];
                                $lat = $get_lat_long['lat'];
                                $user_vehicle_info['zip_lon'] = $get_lat_long['lon'];
                                $lon = $get_lat_long['lon'];
                            }

                            $user_profile_info = array();
                            //$user_profile_info['st_zip'] = $user_result[0]['st_zipcode'];
                            $user_profile_info['st_primary_phone'] = $user_result[0]['st_phone'];
                            $user_profile_info['in_status'] = "1";

                            $data['user_profile'] = $this->user_model->update_user_info($user_profile_info, $inserted_id, 'tbl_user_profile');

                            $user_data_array = array("in_status" => "1");
                           

                            $transport_co_details = $this->orgtrasnportation_model->get_transport_coordinator_detail($user_result[0]['in_transportation_id']);
                            if (isset($transport_co_details) && !empty($transport_co_details)) {
                                $user_data_array['st_referred_by'] = $transport_co_details['coordinatorname'];
                            }

                            $this->user_model->update_user($user_data_array, $this->session->userdata('userid'));

                            $driver_data = array("driver_user" => "Y",
                                "avl_days" => array("0" => "Sun", "1" => "Mon", "2" => "Tue", "3" => "Wed", "4" => "Thu", "5" => "Fri", "6" => "Sat"),
                                "zipcode" => $this->session->userdata('zip'),
                                "vehicle_ids" => array("0" => ""),
                                //"vehicletype"  => array("0"=>$user_result[0]['st_vehicle_type']),
                                "vehicletype" => array("0" => "4-Door Car"),
                                "distance" => array("0" => 100),
                                "color" => array("0" => $user_result[0]['st_vehicle_color']),
                                "license" => array("0" => $user_result[0]['st_license_plate']),
                                "license_state" => array("0" => $user_result[0]['st_license_state']),
								"googlephotos_vehicle" =>array("0"=>""),
                            );
                            $this->user_model->update_vehicle_details($driver_data, $this->session->userdata('userid'), $this->session->userdata('zip'), serialize($driver_data['avl_days']), $lat, $lon, 'tbl_user_vehicle');
                            $driver_profile_info['st_driver'] = "Y";
                            $driver_profile_info['dt_modified'] = date('Y-m-d H:i:s');
                            $data['user_profile'] = $this->user_model->update_user_info($driver_profile_info, $this->session->userdata('userid'), 'tbl_user_profile');
                        }

                        foreach ($user_result as $key => $value) 
						{
                            $join_data = array("in_transportation_id" => $value['in_transportation_id'],
                                "in_user_id" => $this->session->userdata('userid'),
                                "in_transportation_leg_id" => $value['in_leg_id'],
                                "in_created_by" => $this->session->userdata('userid'),
                                "dt_created" => date("Y-m-d H:i:s"),
                                "in_deleted" => 0
                            );
										
                            $this->orgtrasnportation_model->join_legs($join_data);
							

                            $this->orgtrasnportation_model->update_non_doobert_user_leg($value['in_non_doobert_user_id']);

                            $leg_type = $this->orgtrasnportation_model->get_leg_type_by_id($value['in_leg_id']);

                            if (!empty($leg_type)) 
							{
                                if (isset($leg_type[0]['in_route_type']) && $leg_type[0]['in_route_type'] != '' && $leg_type[0]['in_route_type'] == 0) 
								{
                                    $data['arrVehicle'] = $this->user_model->get_vehicle_detail($this->session->userdata('userid'));
                                    if (!empty($data['arrVehicle'][0]) && isset($data['arrVehicle'][0]['in_vehicle_id'])) 
									{
                                        $leg_vehicle_detail = array("in_transportation_id" => $value['in_transportation_id'],
                                            "in_user_id" => $this->session->userdata('userid'),
                                            "in_vehicle_id" => $data['arrVehicle'][0]['in_vehicle_id'],
                                            "in_transportation_leg_id" => $value['in_leg_id'],
                                            "dt_created" => date("Y-m-d H:i:s"),
                                            "in_deleted" => 0
                                        );
                                        $this->orgtrasnportation_model->add_leg_vehicle_detail($leg_vehicle_detail);
                                    }
                                }
                            }
                        }
                    }
					$nondoobert_vol_org = $this->user_model->match_nondoobert_org_vol($this->session->userdata('email'));
					{
						if(count($nondoobert_vol_org))
						{
							$insert_record = array();
							foreach($nondoobert_vol_org as $key=>$value)
							{
									if(!empty($value['in_organization_id']))
									{
										$insert_record[] = array('in_organization_id' => $value['in_organization_id'],
																		 'in_user_id' => $this->session->userdata('userid'),
																		 'in_deleted' => 0,
																		'dt_created'  => date("Y-m-d H:i:s"),
																	   'dt_modified'  => date("Y-m-d H:i:s")					
																);
									}
								$this->user_model->delete_nondoobert_org_vol($value['in_vol_user_id']);		
							}
							

							if(count($insert_record)>0)
							{	
										$feedback_id = $this->db->insert_batch('tbl_organization_preferred_volunteer',$insert_record);
							}	
							
						}
					}
					redirect($this->config->item('base_url') . "confirm-type");  	
                }
            }
        }

        $this->load->view('florence-signup', $data);
	}//organization_registration


	function generate_random_password($length = 10) {
		$alphabets = range('A','Z');
		$numbers = range('0','9');
		$additional_characters = array('_','.');
		$final_array = array_merge($alphabets,$numbers,$additional_characters);
			 
		$password = '';
	  
		while($length--) {
		  $key = array_rand($final_array);
		  $password .= $final_array[$key];
		}
	  
		return $password;
	}
	
	function login_details($data) 
	{
        $allmail = $data['emailaddress'];
        $this->load->library('email');
        $email_details = $this->common_model->get_email_containt("105");
		$q			=	$this->common_model->get_affiliate_donation_detail('3');
		if(isset($q) && !empty($q)){					   		
				foreach($q as $qr)
				{		 
					  
					if(!empty($qr['st_image']))
					{
							$imgpath	=	$this->config->item('upload_url').'affiliate_images/orig/'.$qr['st_image'];
							$imgtitle   =   $qr['st_banner_name']; 				
							$donation	    = '<a href='.$qr['st_url'].'><img src="'.$imgpath.'" 

							alt="'.$imgtitle.'" title="'.$imgtitle.'" border="0" style="margin-top: 20px;"/></a>';											
						  
						  
					}
					else
					{
						   $donation='';								 
					}							  
						
				}
			}			
			   
		   else
		   {
			  $donation='';
		   }
        if (isset($email_details[0]['st_email_body'])) 
		{
            $templete = $email_details[0]['st_email_body'];
            $templete = str_replace("##url##", $this->config->item('base_url'), $templete);
            $templete = str_replace("##display_name##", $data['username'] . " " . $data['lastname'], $templete);
            $templete = str_replace("##current_year##", date('Y'), $templete);
			$templete = str_replace("##DONATION##", $donation, $templete);
			$userid = $this->session->userdata('userid');
			
			$confirm_email_link = base_url().'verify/'.base64_encode($userid).'/'.base64_encode($data['email_verification_code']);
			
			$user_email_verify_status = $this->user_model->check_email_verification_status($userid);
									
			if(isset($user_email_verify_status) && isset($user_email_verify_status['in_email_verify_status']) && $user_email_verify_status['in_email_verify_status'] == '0')
			{			
				$confirm_email_url = '<p style="font:16px/24px Arial, Helvetica, sans-serif;color:#222222;margin:0;padding:0 0 25px;">
					<a href="'.$confirm_email_link.'" style="color:#fff;text-decoration:none;font-family:Arial, Helvetica, sans-serif;font-size:20px;display:inline;background:#ee6d35;padding:13px 25px 13px 18px;border-radius:3px; display:inline-block;"><img alt="Click here to confirm your email" src="https://app.doobert.com//assets/img/email_img/confirm-email-icon.jpg" style="border:none; display:inline-block; vertical-align:top; padding-right:10px;" title="" />
						Click here to confirm your email</a></p>';
			}else{
				$confirm_email_url = '';
			}
			$templete = str_replace("##confirm_email_link##", $confirm_email_url, $templete);
					
            $strMail = $templete;
            $to = $allmail;
            $subject = $email_details[0]['st_email_subject'];
            $message = $strMail;
			
			$category = $email_details[0]['st_category'];
			
			$message = str_replace("##change_to_daily_digest##",base_url().'user/update_daily_digest/'.$this->common_function->encode_base64($userid).'/'.$this->common_function->encode_base64($to),$message);
		
			$message = str_replace("##unsubscribe_url##",base_url().'user/unsubscribe_complete/'.$this->common_function->encode_base64($userid).'/'.$this->common_function->encode_base64($to),$message);
			
	        $this->common_function->send_mail($this->email, $to, $subject, $message, $this->config->item('admin_email_from'), $cc = '', $this->config->item('admin_from_name'),$this->email,$category);
        }
    }
	
	function email_confirm()
	{		
		$userid = $this->session->userdata('userid');	
		$verificationCode = $this->generate_random_password(15);
		$details = array("st_email_verification_code" => $verificationCode);
        $this->user_model->update_user($details, $userid);
					
		$this->load->library('email');
		$email_details = $this->common_model->get_email_containt("81");
		$q			=	$this->common_model->get_affiliate_donation_detail('3');
		if(isset($q) && !empty($q)){					   		
				foreach($q as $qr)
				{		 
					  
					if(!empty($qr['st_image']))
					{
							$imgpath	=	$this->config->item('upload_url').'affiliate_images/orig/'.$qr['st_image'];
							$imgtitle   =   $qr['st_banner_name']; 				
							$donation	    = '<a href='.$qr['st_url'].'><img src="'.$imgpath.'" 

							alt="'.$imgtitle.'" title="'.$imgtitle.'" border="0" style="margin-top: 20px;"/></a>';											
						  
						  
					}
					else
					{
						   $donation='';								 
					}							  
						
				}
			}			
			   
		   else
		   {
			  $donation='';
		   }
		if (isset($email_details[0]['st_email_body'])) 
		{
			$templete = $email_details[0]['st_email_body'];
			
			$templete = str_replace("##display_name##", $this->session->userdata('user_name') . " " . $this->session->userdata('last_name'), $templete);
			$templete = str_replace("##current_year##", date('Y'), $templete);
			$templete = str_replace("##DONATION##", $donation, $templete);
			
			//echo 'userid'.$userid;
			//$confirm_email_url = base_url().'verify/'.base64_encode($userid).'/'.base64_encode($verificationCode);
			//$confirm_email_url = '<a href="'.base_url().'verify/'.base64_encode($userid).'/'.base64_encode($data['email_verification_code']).'">'.base_url().'verify/'.base64_encode($userid).'/'.base64_encode($data['email_verification_code']).'</a>';
			$confirm_email_url = '<a href="'.base_url().'verify/'.base64_encode($userid).'/'.base64_encode($verificationCode).'">'.base_url().'verify/'.base64_encode($userid).'/'.base64_encode($verificationCode).'</a>';
			$templete = str_replace("##confirm_email_link##", $confirm_email_url, $templete);
			$strMail = $templete;
			$to = $this->session->userdata('email');
			$subject = $email_details[0]['st_email_subject'];
			$message = $strMail;
			$email_sent_status = 0;
			//print_r($message);exit;
			$category = $email_details[0]['st_category'];
			
			$message = str_replace("##change_to_daily_digest##",base_url().'user/update_daily_digest/'.$this->common_function->encode_base64($userid).'/'.$this->common_function->encode_base64($to),$message);
		
			$message = str_replace("##unsubscribe_url##",base_url().'user/unsubscribe_complete/'.$this->common_function->encode_base64($userid).'/'.$this->common_function->encode_base64($to),$message);
			
			$send_email = 1;							
			$sub_data = $this->common_model->check_user_unsub_emails($userid);
			if(isset($sub_data) && $sub_data['flg_daily_email'] == '2' && $sub_data['flg_immediate_all'] == '2' && $sub_data['flg_immediate_transport'] == '2' && $sub_data['flg_immediate_animal'] == '2' && $sub_data['flg_immediate_fund'] == '2')
			{
				$send_email = 0;										
			}
			
			$email_template_id = $email_details[0]['in_email_id'];
			$template_allowed = $this->common_model->check_allowed_even_blocked($email_template_id);
			if(isset($template_allowed) && isset($template_allowed['in_allow_status']) && $template_allowed['in_allow_status'] == '1')
			{
				$send_email = 1;
			}
			
			if($send_email == '1')
			{
				$email_sent_status = $this->common_function->send_mail($this->email, $to, $subject, $message, $this->config->item('admin_email_from'), $cc = '', $this->config->item('admin_from_name'),$this->email,$category);
			}	
		}
	}

}//class