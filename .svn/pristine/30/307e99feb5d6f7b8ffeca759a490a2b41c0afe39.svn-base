<?php
# ======================================================================================
# Created by		: Rajashri Mahapure
# Created date		: 31-May-2017
# File description	: Partner map model
# Special - notes	: none
# Tables used		: none
# Stored procedures	: NONE 
# Triggers used		: none
# --------------------------------------------------------------------------------------
class partner_map_model extends CI_Model {

    function __construct() {
        // Call the Model constructor
        parent::__construct();
    }	
	
	function user_details($uid)
	{
		$this->db->select('u.st_display_name ,u.st_email');
		$this->db->from('tbl_users as u');
		$this->db->where('u.in_user_id',$uid);
		$qry = $this->db->get();
		return $qry->result();
	}
	
	function org_details($uid)
	{
		$this->db->select('o.st_org_name ,o.st_email_address,o.in_organization_id');
		$this->db->from('tbl_organization as o');
		$this->db->where('o.in_organization_id',$uid);
		$qry = $this->db->get();
		return $qry->result();
	}
	
	function non_doobert_org_details($uid)
	{
		$this->db->select('o.stOrgName ,o.stOrgEmail,o.inNonDoobertOrgId');
		$this->db->from('tbl_non_doobert_org as o');
		$this->db->where('o.inNonDoobertOrgId',$uid);
		$qry = $this->db->get();
		return $qry->result();
	}
	
	
	function get_non_doobert_org() {
		$this->db->select("o.inNonDoobertOrgId,o.stOrgName,o.stOrgEmail,o.stOrgWeb,o.stAddr1,o.stAddr2,o.stCity,o.stState,o.stZip,z.lat,z.lon",FALSE);
		$this->db->from("tbl_non_doobert_org as o");
		$this->db->join("tbl_zip_code as z","z.zip_code=o.stZip","LEFT");		
		$this->db->where("o.inDeleted",0);		
		$query = $this->db->get();
		$data=array();		
		
		foreach($query->result_array() as $row) {	
		
				$address  = '';				
				$address .= (!empty($row['stAddr1'])?$row['stAddr1'].', ':'');
				$address .= (!empty($row['stAddr2'])?$row['stAddr2'].', ':'');
		
				
			$data[] = array('org_id'		=>	$row['inNonDoobertOrgId'],
							'orgname'    	=>	$row['stOrgName'],								
							'email'			=>  $row['stOrgEmail'],
							'address'		=>  $address,							
							'city'			=>  $row['stCity'],
							'state'			=>  $row['stState'],
							'zip'			=>  trim($row['stZip']),
							'lat'			=>  $row['lat'],
							'lon'			=>  $row['lon'],
							'website'		=>  $row['stOrgWeb'],
							'img'			=>  'doobert-non-organization-legend.png'				
							);
						
		}			
		return $data;
	}
	
	
	function get_doobert_org_old() {
		$this->db->select("o.in_organization_id,o.in_status,o.st_org_name,o.st_address1,o.st_address2,o.st_city,o.st_state,o.st_zip,z.lat,z.lon",false);
		$this->db->from('tbl_organization as o');
		$this->db->join('tbl_zip_code as z',"z.zip_code=o.st_zip",'LEFT');
		$this->db->join('tbl_organization_setting as os',"os.in_organization_id=o.in_organization_id",'LEFT');
		$this->db->join('tbl_users as u','u.in_user_id = o.in_user_id','INNER'); // for testing. 	
		$wh='';
		$wh .="(o.in_deleted=0 AND o.in_status=1 AND z.lat!='' AND z.lon!='' AND u.in_deleted=0)";
		$wh .= "AND (os.in_public IS NULL OR os.in_public = 0)";
		$this->db->where($wh);			
		$this->db->group_by('o.in_organization_id');	
		$query = $this->db->get();
		
		$data=array();
		foreach($query->result_array() as $row) {
		
				$address  = '';				
				$address .= (!empty($row['st_address1'])?$row['st_address1'].', ':'');
				$address .= (!empty($row['st_address2'])?$row['st_address2'].', ':'');		
		
		   
			$data[] = array('org_id'		=>	$row['in_organization_id'],
							'orgname'		=>	$row['st_org_name'],
							'address'		=>  $address,							
							'city'			=>  $row['st_city'],
							'state'			=>  $row['st_state'],
							'zip'			=>  $row['st_zip'],
							'lat'			=>  $row['lat'],
							'lon'			=>  $row['lon'],
							'status'		=>  $row['in_status'],
							'img'			=>  'doobert-organization-legend.png'	
							);							
						
		}			
		return $data;
	}

	//rajashri
	function get_doobert_org() {
		$org_id = $this->session->userdata('org_id');

		$this->db->select("o.in_organization_id,o.in_status,o.st_org_name,o.st_address1,o.st_address2,o.st_city,o.st_state,o.st_zip,z.lat,z.lon,
			st_org_image,tr.st_prov_animal_type,tr.st_accpt_animal_type,",false);
		$this->db->from('tbl_organization as o');
		$this->db->join('tbl_zip_code as z',"z.zip_code=o.st_zip",'LEFT');
		$this->db->join('tbl_organization_setting as os',"os.in_organization_id=o.in_organization_id",'LEFT');
		$this->db->join('tbl_users as u','u.in_user_id = o.in_user_id','INNER'); // for testing. 	
		$this->db->join('tbl_animal_transfers as tr','tr.in_org_id = o.in_organization_id','INNER');
		$wh='';
		$wh .="(o.in_deleted=0 AND o.in_status=1 AND z.lat!='' AND z.lon!='' AND u.in_deleted=0)";
		$wh .= "AND (os.in_public IS NULL OR os.in_public = 0)";
		$this->db->where($wh);			
		$this->db->where('o.in_organization_id !=', $org_id);
		$this->db->group_by('o.in_organization_id');	
		$query = $this->db->get();	
		
		$data=array();
		foreach($query->result_array() as $row) {
		
				$address  = '';				
				$address .= (!empty($row['st_address1'])?$row['st_address1'].', ':'');
				$address .= (!empty($row['st_address2'])?$row['st_address2'].', ':'');		
		
		   
			$data[] = array('org_id'		=>	$row['in_organization_id'],
							'orgname'		=>	$row['st_org_name'],
							'address'		=>  $address,							
							'city'			=>  $row['st_city'],
							'state'			=>  $row['st_state'],
							'zip'			=>  $row['st_zip'],
							'lat'			=>  $row['lat'],
							'lon'			=>  $row['lon'],
							'status'		=>  $row['in_status'],
							'img'			=>  'doobert-organization-legend.png',
							'provide_animal'    =>  unserialize($row['st_prov_animal_type']),
							'accept_animal'		=> 	unserialize($row['st_accpt_animal_type']),
							'st_org_image' => $row['st_org_image']
							);							
						
		}			
		return $data;
	}


	
	public function get_state_by_zipcode($zip)
	{
		$this->db->select('city,state_prefix,st_country,lat,lon');
		$this->db->from('tbl_zip_code');        
		$this->db->where('zip_code', $zip);		
		$query = $this->db->get();
		//echo $this->db->last_query();die;
		return $query->row_array();
	}
	
	
	
	function get_nearby_organization($zipcode, $org_id='',$miles='')
	{
		if(!empty($org_id)){
			$org_id = $org_id;
		}else{
			$org_id = $this->session->userdata('org_id');
		}

		if(!empty($zipcode))
		{				
			$lat_long = $this->get_lat_long($zipcode);
		}
		if(!empty($miles)){
			$miles = $miles;
		}else{
			$miles = 100;
		}
		//print_r($lat_long);die;
		 $data	=	array();
		if(sizeof($lat_long) > 0)
		{ 
		$this->db->select('o.in_organization_id,o.in_status,o.st_org_name,o.st_address1,o.st_address2,o.st_city,o.st_state,o.st_zip,zp.lat,zp.lon,tr.st_prov_animal_type,tr.st_accpt_animal_type,st_org_image');
		$this->db->from('tbl_organization o');		  
		$this->db->join('tbl_zip_code zp', 'zp.zip_code=o.st_zip', 'LEFT');		
		$this->db->join('tbl_organization_setting as os',"os.in_organization_id=o.in_organization_id",'LEFT');	
		$this->db->join('tbl_users as u','u.in_user_id = o.in_user_id','INNER'); // for testing. 			
		$this->db->join('tbl_animal_transfers as tr','tr.in_org_id = o.in_organization_id','INNER');
		$where1 = "((3959 * acos( cos( radians( {$lat_long[0]['lat']} ) ) * cos( radians( zp.lat ) ) * cos( radians( zp.lon ) - radians( {$lat_long[0]['lon']} ) ) + sin( radians( {$lat_long[0]['lat']} ) ) * sin( radians( zp.lat ) ) ) ) < '" . $miles . "')";
		$this->db->where($where1);		
		
		 $wh='';
		 $this->db->where('o.in_status','1');
		 $this->db->where('o.in_deleted','0');
		  $this->db->where('u.in_deleted','0');
		 
		 $this->db->where('zp.lat !=','');
		 $this->db->where('zp.lon !=','');
		 
		 $wh .= "(os.in_public IS NULL OR os.in_public = 0)";
		 $this->db->where($wh);
		 $this->db->group_by('o.in_organization_id');
		 $this->db->where('o.in_organization_id !=', $org_id);
		 $query = $this->db->get();
		$temp_lat	=	0;
		$temp_lon	=	0;
		$i=0;
		 if($query->num_rows() > 0 )
		 {	 
			foreach($query->result_array() as $key=>$value)
			{
			
				$address  = '';				
				$address .= (!empty($value['st_address1'])?$value['st_address1'].', ':'');
				$address .= (!empty($value['st_address2'])?$value['st_address2'].', ':'');
				if($temp_lat!=0 && $temp_lon!=0)
					{
						$miles = $this->distance($temp_lat, $temp_lon, $value['lat'], $value['lon'], 'K');
						
						//if($miles < 1)
						if($miles)
						{	
						
							$i++;							
							$temp_lat	=	$value['lat'] +($i/30);
							$temp_lon	=	$value['lon'];
						}
						else{
						
							$temp_lat	=	$value['lat'];
							$temp_lon	=	$value['lon'];
						}
						
					}else{
						
						$temp_lat	=	$value['lat'];
						$temp_lon	=	$value['lon'];
					}

				$data[] = array('org_id'		=>	$value['in_organization_id'],
								'orgname'		=>	$value['st_org_name'],
								'address'		=>  $address,							
								'city'			=>  $value['st_city'],
								'state'			=>  $value['st_state'],
								'zip'			=>  $value['st_zip'],
								'lat' 			=>  $temp_lat,
								'lon'			=>  $temp_lon,
								'status'		=>  $value['in_status'],
								'img'			=>  'doobert-organization-legend.png',
								'provide_animal'    =>  unserialize($value['st_prov_animal_type']),
								'accept_animal'		=> 	unserialize($value['st_accpt_animal_type']),
								'st_org_image' => $value['st_org_image']
								);
			}
		 }	
		 }

		return $data;
	 		
	}
	
	
	
	function get_non_doobert_nearby_organization($zipcode)
	{
		$data = array();
		if(!empty($zipcode))
		{				
			$lat_long = $this->get_lat_long($zipcode);
		} else {
			$city_latlong = $this->get_fullzipcode_by_state_city($zipcode,$zipcode);
			$lat_long = $this->get_lat_long($city_latlong[0]['value']);
		}	
		$miles = 100;		
		$data=array();
		if(isset($lat_long) && sizeof($lat_long)>0)
		{   //echo $lat_long[0]['lat'];die;
			$this->db->select('o.inNonDoobertOrgId,o.stOrgName,o.stOrgEmail,o.stOrgWeb,o.stAddr1,o.stAddr2,o.stCity,o.stState,o.stZip,zp.lat,zp.lon');
			$this->db->from('tbl_non_doobert_org o');		
			$this->db->join('tbl_zip_code zp', 'zp.zip_code=o.stZip', 'LEFT');				
			$where1 = "((3959 * acos( cos( radians( {$lat_long[0]['lat']} ) ) * cos( radians( zp.lat ) ) * cos( radians( zp.lon ) - radians( {$lat_long[0]['lon']} ) ) + sin( radians( {$lat_long[0]['lat']} ) ) * sin( radians( zp.lat ) ) ) ) < '" . $miles . "')";
			$this->db->where($where1);	
			$this->db->where('o.inDeleted','0');			
			$query = $this->db->get();
			//echo $this->db->last_query();die;
			$temp_lat	=	0;
			$temp_lon	=	0;
			$i= 0;
			 if($query->num_rows() > 0 )
			 {	 
				foreach($query->result_array() as $key=>$value)
				{
					$address  = '';				
					$address .= (!empty($value['stAddr1'])?$value['stAddr1'].', ':'');
					$address .= (!empty($value['stAddr2'])?$value['stAddr2'].', ':'');
					if($temp_lat!=0 && $temp_lon!=0)
					{
						$miles = $this->distance($temp_lat, $temp_lon, $value['lat'], $value['lon'], 'K');
						
						//if($miles < 1)
						if($miles)
						{	
						
							$i++;							
							$temp_lat	=	$value['lat'] +($i/30);
							$temp_lon	=	$value['lon'];
						}
						else{
						
							$temp_lat	=	$value['lat'];
							$temp_lon	=	$value['lon'];
						}
						
					}else{
						
						$temp_lat	=	$value['lat'];
						$temp_lon	=	$value['lon'];
					}
					
				$data[] = array('org_id'		=>	$value['inNonDoobertOrgId'],
								'orgname'    	=>	$value['stOrgName'],								
								'email'			=>  $value['stOrgEmail'],
								'address'		=>  $address,							
								'city'			=>  $value['stCity'],
								'state'			=>  $value['stState'],
								'zip'			=>  trim($value['stZip']),
								'lat'			=>  $temp_lat,
								'lon'			=>  $temp_lon,
								'website'		=>  $value['stOrgWeb'],
								'img'			=>  'doobert-non-organization-legend.png'				
								);
				}
			 }
		 }	 
		
		return $data;
	 		
	}
	
	
	
	
	/*public function get_all_doobert_nearby_organization($zipcode)
	{
		$data = array();
		if(!empty($zipcode))
		{				
			$lat_long = $this->get_lat_long($zipcode);
		}	
		$miles = 100;
		$data	=	array();
		if(isset($lat_long) && sizeof($lat_long)>0)
		{
			$this->db->select('o.in_organization_id,o.in_status,o.st_org_name,o.st_address1,o.st_address2,o.st_city,o.st_state,o.st_zip,zp.lat,zp.lon');
			$this->db->from('tbl_organization o');
		
			$this->db->join('tbl_zip_code zp', 'zp.zip_code=o.st_zip', 'LEFT');	
			$this->db->join('tbl_organization_setting as os',"os.in_organization_id=o.in_organization_id",'LEFT');	
			$this->db->join('tbl_users as u','u.in_user_id = o.in_user_id','INNER'); // for testing. 
			
			$where1 = "((3959 * acos( cos( radians( {$lat_long[0]['lat']} ) ) * cos( radians( zp.lat ) ) * cos( radians( zp.lon ) - radians( {$lat_long[0]['lon']} ) ) + sin( radians( {$lat_long[0]['lat']} ) ) * sin( radians( zp.lat ) ) ) ) < '" . $miles . "')";
			$this->db->where($where1);		
			 $wh='';
			 $this->db->where('o.in_status','1');
			 $this->db->where('o.in_deleted','0');
			 $this->db->where('u.in_deleted','0');
			 $this->db->where('zp.lat !=','');
			 $this->db->where('zp.lon !=','');		 
			 $wh .= "(os.in_public IS NULL OR os.in_public = 0)";
			 $this->db->where($wh);
			 $this->db->group_by('o.in_organization_id');
			 $query = $this->db->get();
		 	
		 	$temp_lat	=	0;
			$temp_lon	=	0;
			$i= 0;

		 	if($query->num_rows() > 0 )
			 {	 
				foreach($query->result_array() as $key=>$value)
				{
				
					$address  = '';				
					$address .= (!empty($value['st_address1'])?$value['st_address1'].', ':'');
					$address .= (!empty($value['st_address2'])?$value['st_address2'].', ':'');

					if($temp_lat!=0 && $temp_lon!=0)
					{
						$miles = $this->distance($temp_lat, $temp_lon, $value['lat'], $value['lon'], 'K');
						
						//if($miles < 1)
						if($miles)
						{	
						
							$i++;							
							$temp_lat	=	$value['lat'] +($i/30);
							$temp_lon	=	$value['lon'];
						}
						else{
						
							$temp_lat	=	$value['lat'];
							$temp_lon	=	$value['lon'];
						}
						
					}else{
						
						$temp_lat	=	$value['lat'];
						$temp_lon	=	$value['lon'];
					}

					$data[] = array('org_id'  => $value['in_organization_id'],
									'orgname' => $value['st_org_name'],
									'address' => $address,
									'city'	  => $value['st_city'],
									'state'	  => $value['st_state'],
									'zip' 	  => $value['st_zip'],
									'lat'	  => $temp_lat,
									'lon'	  => $temp_lon,
									'status'  => $value['in_status'],
									'img'	  => 'doobert-organization-legend.png'
									);
				}
			 }
			 $this->db->select('o.inNonDoobertOrgId,o.stOrgName,o.stOrgEmail,o.stOrgWeb,o.stAddr1,o.stAddr2,o.stCity,o.stState,o.stZip,zp.lat,zp.lon');
			 $this->db->from('tbl_non_doobert_org o');
			 
			 $this->db->join('tbl_zip_code zp', 'zp.zip_code=o.stZip', 'LEFT');				
			 $where2 = "((3959 * acos( cos( radians( {$lat_long[0]['lat']} ) ) * cos( radians( zp.lat ) ) * cos( radians( zp.lon ) - radians( {$lat_long[0]['lon']} ) ) + sin( radians( {$lat_long[0]['lat']} ) ) * sin( radians( zp.lat ) ) ) ) < '" . $miles . "')";
			 $this->db->where($where2);	
		 	 $this->db->where('o.inDeleted','0');
		 	 $query2 = $this->db->get();
		 	 $temp_lat1	=	0;
			$temp_lon1	=	0;
			$i1= 0;

		 	 if($query2->num_rows() > 0 )
			 {	 
				foreach($query2->result_array() as $key=>$value)
				{
					$address  = '';				
					$address .= (!empty($value['stAddr1'])?$value['stAddr1'].', ':'');
					$address .= (!empty($value['stAddr2'])?$value['stAddr2'].', ':'');
					
					if($temp_lat1!=0 && $temp_lon1!=0)
					{
						$miles = $this->distance($temp_lat1, $temp_lon1, $value['lat'], $value['lon'], 'K');
						
						//if($miles < 1)
						if($miles)
						{	
						
							$i1++;							
							$temp_lat1	=	$value['lat'] +($i1/30);
							$temp_lon1	=	$value['lon'];
						}
						else{
						
							$temp_lat1	=	$value['lat'];
							$temp_lon1	=	$value['lon'];
						}
						
					}else{
						
						$temp_lat1	=	$value['lat'];
						$temp_lon1	=	$value['lon'];
					}

					
				$data[] = array('org_id'		=>	$value['inNonDoobertOrgId'],
								'orgname'    	=>	$value['stOrgName'],								
								'email'			=>  $value['stOrgEmail'],
								'address'		=>  $address,							
								'city'			=>  $value['stCity'],
								'state'			=>  $value['stState'],
								'zip'			=>  trim($value['stZip']),
								'lat'			=>  $temp_lat1,
								'lon'			=>  $temp_lon1,
								'website'		=>  $value['stOrgWeb'],
								'img'			=>  'doobert-non-organization-legend.png'				
								);
				}
			 }	
			 
		 }			 
		
		return $data;	
	
	}
	*/
	
	public function get_lat_long($zipcode)
	{   $zip=strtolower(preg_replace('/\s+/', '', $zipcode));
		$this->db->select('lat,lon');
		$this->db->from('tbl_zip_code');
		$wh='';		
		$wh .= "(tbl_zip_code.zip_code='".addslashes($zip)."' OR REPLACE(LOWER(tbl_zip_code.city),' ','') LIKE '%".addslashes($zip)."%')";
		$this->db->where($wh);
		$query = $this->db->get()->result_array();
		//echo $this->db->last_query(); die;
		return $query;	
	}
	
	public function get_fullzipcode_by_state_city($city='',$state='')
	{
		$this->db->select("concat(zip_code,', ',city,', ',state_prefix) as label, zip_code as value,city,state_prefix",FALSE);
		$this->db->from('tbl_zip_code');
		
		//$this->db->where('city',$city);
		//$this->db->where('state_prefix',$state);
		$this->db->where('lower(city) LIKE lower("'.$city.'%") AND UPPER(state_prefix) = UPPER("'.trim($state).'")');		
		$this->db->limit("1");
		
		$query = $this->db->get();
		//echo $this->db->last_query();die;
		if($query->num_rows() > 0)
		{
			$arrData = array();
			foreach($query->result() as $Row)
			{			
			//echo $Row->st_country;die;
					$arrData[]	= array("label"			=> $Row->label,
										"value"			=> $Row->value,
										"city"			=> $Row->city,
										"state_prefix"	=> $Row->state_prefix,
										//"st_country"	=> strtoupper($this->common_function->shortCountry[trim($Row->st_country)])
										);
			}
			return $arrData;
		}
		
	}
	
	public function get_zipcode2_old($zipcode)
	{
		$this->db->select("concat(zip_code,', ',city,', ',state_prefix) as label, zip_code as value,city,state_prefix",FALSE);
		$this->db->from('tbl_zip_code');	
		
		// if normal 1 char is present 
		if (strpos($zipcode ,',') == false) {
		$this->db->where('zip_code LIKE "'.$zipcode.'%" OR lower(city) LIKE lower("'.$zipcode.'%") OR UPPER(state_prefix) = UPPER("'.trim($zipcode).'")');
		} else {
		$value=explode(',',$zipcode);
		if(!empty($value))
		{
			if(is_numeric($value[0]))
			{
				$this->db->where('zip_code LIKE "'.$value[0].'%"',FALSE,FALSE);			
			}else {
			 if(isset($value[0]) && isset($value[1])){

			 	if(strlen($value[1]) > 2)
				{
					$states_list = $this->common_function->state_list;
					if(in_array(ucfirst($value[1]), $states_list))
					{
						$state_key = array_search(ucfirst($value[1]), $states_list);
						$value[1] = $state_key;
					}
					//echo $state;exit;
				}
			 
			 $this->db->where('lower(city) LIKE lower("'.$value[0].'%") AND UPPER(state_prefix) = UPPER("'.trim($value[1]).'")');
			 }else {
			  $this->db->where('lower(city) LIKE lower("'.$value[0].'%") AND UPPER(state_prefix) = UPPER("'.trim($value[0]).'")');
			 }
			}
			
		}
		}
		$this->db->limit("10");
				
		$query = $this->db->get();
		//echo $this->db->last_query();die;
		if($query->num_rows() > 0)
		{
			$arrData = array();
			foreach($query->result() as $Row)
			{			
			//echo $Row->st_country;die;
					$arrData[]	= array( "label"     	=> $Row->label,
										"value"			=> $Row->value,
										"city"			=> $Row->city,
										"state_prefix"	=> $Row->state_prefix,
										//"st_country"	=> strtoupper($this->common_function->shortCountry[trim($Row->st_country)])
										);
			}
			return $arrData;
		}
		//return $query->result_array();
	}
	
	public function get_zipcode_data($zipcode='',$city='',$state='',$action='')
	{
		$this->db->select("concat(zip_code,', ',city,', ',state_prefix,', ',st_country) as label, zip_code,city,state_prefix",FALSE);
		$this->db->from('tbl_zip_code');		
		if($action=='')
		{
			$this->db->where('zip_code LIKE "'.$zipcode.'%"',FALSE,FALSE);
			$this->db->limit("10");
		}
		else
		{
		if($city)
		{
			//$this->db->where('lower(city) LIKE lower("'.$city.'%")',FALSE,FALSE);
			$this->db->where('lower(city) = lower("'.$city.'")',FALSE,FALSE);
		}
		if($state)
		{
			$this->db->where('UPPER(state_prefix) = UPPER("'.$state.'")',FALSE,FALSE);
		}
		$this->db->limit("20");
		}
		
		$query = $this->db->get();
		//echo $this->db->last_query();die;
		/*if($query->num_rows() > 0)
		{
			$arrData = array();
			foreach($query->result() as $Row)
			{			
			//echo $Row->st_country;die;
					$arrData[]	= array("label"			=> $Row->label.", ".$this->common_function->shortCountry[trim($Row->st_country)],
										"value"			=> $Row->value,
										"city"			=> $Row->city,
										"state_prefix"	=> $Row->state_prefix,
										"st_country"	=> strtoupper($this->common_function->shortCountry[trim($Row->st_country)])
										);
			}
			return $arrData;
		}*/
		return $query->result_array();
	}
	
	public function get_featuredpartners()
	{
		$this->db->select('st_partner_name,st_desc,st_image,st_url');
		$this->db->from('tbl_featured_partner');        
		$this->db->where('in_deleted',0);	
		$this->db->order_by('st_partner_name','ASC');	
		$query = $this->db->get();
		//echo $this->db->last_query();die;
		return $query->result_array();		
	}


	function get_doobert_org_bystate($state_name) {
		$org_id = $this->session->userdata('org_id');

		$this->db->select("o.in_organization_id,o.in_status,o.st_org_name,o.st_address1,o.st_address2,o.st_city,o.st_state,o.st_zip,z.lat,z.lon,
			st_org_image,tr.st_prov_animal_type,tr.st_accpt_animal_type,",false);
		$this->db->from('tbl_organization as o');
		$this->db->join('tbl_zip_code as z',"z.zip_code=o.st_zip",'LEFT');
		$this->db->join('tbl_organization_setting as os',"os.in_organization_id=o.in_organization_id",'LEFT');
		$this->db->join('tbl_users as u','u.in_user_id = o.in_user_id','INNER'); // for testing. 	
		$this->db->join('tbl_animal_transfers as tr','tr.in_org_id = o.in_organization_id','INNER');
		$wh='';
		$wh .="(o.in_deleted=0 AND o.in_status=1 AND z.lat!='' AND z.lon!='' AND u.in_deleted=0)";
		$wh .= "AND (os.in_public IS NULL OR os.in_public = 0)";
		$this->db->where($wh);			
		$this->db->where('o.in_organization_id !=', $org_id);
		$this->db->where('o.st_state',$state_name);
		$this->db->group_by('o.in_organization_id');	
		$query = $this->db->get();	
		
		$data=array();
		$temp_lat	=	0;
		$temp_lon	=	0;
		$i =0;
		
		if ($query->num_rows() > 0) {
			foreach($query->result_array() as $row) {
			
					$address  = '';				
					$address .= (!empty($row['st_address1'])?$row['st_address1'].', ':'');
					$address .= (!empty($row['st_address2'])?$row['st_address2'].', ':'');		
					
					if($temp_lat!=0 && $temp_lon!=0)
					{
						$miles = $this->distance($temp_lat, $temp_lon, $row['lat'], $row['lon'], 'K');
						
						//if($miles < 1)
						if($miles)
						{	
						
							$i++;							
							$temp_lat	=	$row['lat'] +($i/30);
							$temp_lon	=	$row['lon'];
						}
						else{
						
							$temp_lat	=	$row['lat'];
							$temp_lon	=	$row['lon'];
						}
						
					}else{
						
						$temp_lat	=	$row['lat'];
						$temp_lon	=	$row['lon'];
					}


			   
				$data[] = array('org_id'		=>	$row['in_organization_id'],
								'orgname'		=>	$row['st_org_name'],
								'address'		=>  $address,							
								'city'			=>  $row['st_city'],
								'state'			=>  $row['st_state'],
								'zip'			=>  $row['st_zip'],
								//'lat' 			=>  $temp_lat,
								//'lon'			=>  $temp_lon,
								'lat' 			=>  $row['lat'],
								'lon'			=>  $row['lon'],
								'status'		=>  $row['in_status'],
								'img'			=>  'doobert-organization-legend.png',
								'provide_animal'    =>  unserialize($row['st_prov_animal_type']),
								'accept_animal'		=> 	unserialize($row['st_accpt_animal_type']),
								'st_org_image' => $row['st_org_image']
								);							
							
			}	
			return $data;
		}
		
	}


	function get_non_doobert_org_bystate($state_name) {
		$this->db->select("o.inNonDoobertOrgId,o.stOrgName,o.stOrgEmail,o.stOrgWeb,o.stAddr1,o.stAddr2,o.stCity,o.stState,o.stZip,z.lat,z.lon",FALSE);
		$this->db->from("tbl_non_doobert_org as o");
		$this->db->join("tbl_zip_code as z","z.zip_code=o.stZip","LEFT");		
		$this->db->where("o.inDeleted",0);		
		$this->db->where('o.stState',$state_name);
		if($state_name=='NJ')
		{	
			$this->db->order_by('rand()');
			//$this->db->limit('365');
		}	
		$query = $this->db->get();
		$data=array();		
		$temp_lat	=	0;
		$temp_lon	=	0;
		$i=0;
		foreach($query->result_array() as $row) {	
		
				$address  = '';				
				$address .= (!empty($row['stAddr1'])?$row['stAddr1'].', ':'');
				$address .= (!empty($row['stAddr2'])?$row['stAddr2'].', ':'');
				if($temp_lat!=0 && $temp_lon!=0)
				{
					$miles = $this->distance($temp_lat, $temp_lon, $row['lat'], $row['lon'], 'K');
					
					//if($miles < 1)
					if($miles)
					{	
					
						$i++;							
						$temp_lat	=	$row['lat'] +($i/30);
						$temp_lon	=	$row['lon'];
					}
					else{
					
						$temp_lat	=	$row['lat'];
						$temp_lon	=	$row['lon'];
					}
					
				}else{
					
					$temp_lat	=	$row['lat'];
					$temp_lon	=	$row['lon'];
				}

			$data[] = array('org_id'		=>	$row['inNonDoobertOrgId'],
							'orgname'    	=>	$row['stOrgName'],								
							'email'			=>  $row['stOrgEmail'],
							'address'		=>  $address,							
							'city'			=>  $row['stCity'],
							'state'			=>  $row['stState'],
							'zip'			=>  trim($row['stZip']),
							//'lat' 			=>  $temp_lat,
							//'lon'			=>  $temp_lon,
							'lat' 			=>  $row['lat'],
							'lon'			=>  $row['lon'],
							'website'		=>  $row['stOrgWeb'],
							'img'			=>  'doobert-non-organization-legend.png'				
							);
						
		}			
		return $data;
	}

	public function distance($lat1, $lon1, $lat2, $lon2, $unit) {

	  $theta = $lon1 - $lon2;
	  $dist = sin(deg2rad($lat1)) * sin(deg2rad($lat2)) +  cos(deg2rad($lat1)) * cos(deg2rad($lat2)) * cos(deg2rad($theta));
	  $dist = acos($dist);
	  $dist = rad2deg($dist);
	  $miles = $dist * 60 * 1.1515;
	  $unit = strtoupper($unit);

	  if ($unit == "K") {
	    return ($miles * 1.609344);
	  } else if ($unit == "N") {
	      return ($miles * 0.8684);
	    } else {
	        return $miles;
	      }
	}
	
	public function get_zipcode2($zipcode)
	{
		$value=explode(',',$zipcode);
		if(!empty($value))
		{
		$this->db->select("concat(zip_code,', ',city,', ',state_prefix) as label, zip_code as value,city,state_prefix",FALSE);
		$this->db->from('tbl_zip_code');
		
		
			if(is_numeric($value[0]))
			{
				$this->db->where('zip_code LIKE "%'.trim($value[0]).'%"',FALSE,FALSE);			
			}else {
				if(isset($value[0]) && isset($value[1])){ 
				$this->db->where('lower(city) LIKE lower("%'.trim($value[0]).'%")  AND state_prefix LIKE UPPER("%'.trim($value[1]).'%")');
			 }else {
			  $this->db->where('lower(city) LIKE lower("%'.trim($value[0]).'%") OR state_prefix LIKE UPPER("%'.trim($value[0]).'%")');
			 }
			}
			
		//}
		
		//$this->db->group_by('state_prefix');
		//$this->db->group_by('city');
		$this->db->limit("10");
			
		$query = $this->db->get();
		$test = $this->db->last_query();
		if($query->num_rows() > 0)
		{
			$arrData = array();
			foreach($query->result() as $Row)
			{		
					$label	=	$Row->city.', '.$Row->state_prefix;
					
					$arrData[]	= array( "label"     	=> $Row->label,
										"value"			=> $Row->value,
										"city"			=> $Row->city,
										"state_prefix"	=> $Row->state_prefix,
										//"st_country"	=> strtoupper($this->common_function->shortCountry[trim($Row->st_country)])
										);
			}
			return $arrData;
		}
		} else {
			$arrData = array();
			return $arrData;
		}
				
	}

}
?>
